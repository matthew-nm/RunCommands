" source /blah/blah/vimrc

set background=dark
set nocompatible
"set colorcolumn=85
"set cursorcolumn
set cursorline
set foldlevelstart=10
set hid  "hide buffers when abandoned
set hlsearch
set lazyredraw
set magic
set mouse+=a
set ttymouse=xterm2
set number
set ruler
set scrolloff=7
set noshowmode
set term=xterm-256color
set undodir=~/.undodir/
set undofile

" Search options
set smartcase
set hlsearch
set incsearch  "search as you type

" Set tab length to (2) / convert to spaces
set expandtab
set shiftwidth=2
set softtabstop=2
set tabstop=2

" Fix backspace
set backspace=eol,start,indent
set whichwrap+=<,>,h,l


" Redraw syntax highlighting w/ <F12> (in case of errors)
noremap <F12> <Esc>:syntax sync fromstart<CR> \| :GitGutter<cr>
inoremap <F12> <C-o>:syntax sync fromstart<CR> \| :GitGutter<cr>


" ----- <LEADER> ----- "

" Remap <leader> key
let mapleader = ","
let g:mapleader = ","

" Save
nmap <leader>w :w<cr>

" Quit
nmap <leader>q :qa<cr>

" V-split
nmap <leader>v :vsplit<cr>

" H-split
nmap <leader>V :split<cr>

" New tab
nmap <leader>t :tabnew<cr>

" Fold/unfold all
nmap <leader>z zA

" Turn off highlighting
nmap <leader><space> :noh<cr>

" Hide buffer
nmap <leader>h :hide<cr>

" Delete buffer
nmap <leader>d :bd<cr>

" Toggle NERDTree
nmap <leader>e :NERDTreeToggle<cr>

" Toggle tagbar
nmap <leader>E :TagbarToggle<cr>

" fzf (fuzzy file finder)
map <leader>f :Files<cr>

" Tabularize
nmap <Leader>a= :Tabularize /=<cr>
vmap <Leader>a= :Tabularize /=<cr>
nmap <Leader>a<bar> :Tabularize /<bar><cr>
vmap <Leader>a<bar> :Tabularize /<bar><cr>

" Yankring, show
nmap <leader>p :YRShow<cr>

" Close all hidden buffers
nmap <leader>c :call CloseHiddenBuffers()<cr>

" Close all buffers (then, reopen NERDTree)
nmap <leader>C :%bd \| NERDTreeToggle<cr>

" Far.vim replace
nmap <leader>r :Farp<cr>
nmap <leader>R :Fardo<cr>

" Replace all instances of word under cusor
nmap <leader>s :ReplaceWordUnderCursor<cr>


" ----- EDITING / MOVEMENT ----- "

" Set up/down to work with wrapped lines
nnoremap j gj
nnoremap k gk

" Move to next lint error
map <silent> <F1> :ALENextWrap<cr>
map <silent> <F2> :ALEPreviousWrap<cr>

" Bind system clipboard
vnoremap <C-c> "+y

" Yank to tmux clipboard (vim-tbone)
nnoremap ty :Tyank<cr>
vnoremap ty :Tyank<cr>

" Sudo Save
"   To use this command, type :Sudow
"   Note: all custom commands must start uppercase
command Sudow w !sudo tee % >/dev/null

" Clean trailing whitespace
command! CleanWhitespace
  \ let b:bufview=winsaveview() |
  \ :%s/\s\+$//g                |
  \ :execute "normal \<C-O>"    |
  \ call winrestview(b:bufview) |
  \ :noh

" Replace all instances of word under cursor
command! ReplaceWordUnderCursor
  \ let b:bufview=winsaveview()                         |
  \ let b:foo=expand('<cword>')                         |
  \ :execute "let b:bar=input('Replace" b:foo "with ')" |
  \ :execute ":%s/\\<".b:foo."\\>/".b:bar."/g"          |
  \ :execute "?\\<".b:bar."\\>"                         |
  \ call winrestview(b:bufview)

" IDE mode
command! IDE
  \ call deoplete#enable()
command! NoIDE
  \ call deoplete#disable()

" <CR>: close popup and save indent
inoremap <silent> <CR> <C-r>=<SID>my_cr_function()<CR>
function! s:my_cr_function()
  return (pumvisible() ? "\<C-y>" : "" ) . "\<CR>"
  " For no inserting <CR> key.
  "return pumvisible() ? "\<C-y>" : "\<CR>"
endfunction


" ----- CONTROL / SEARCH ----- "

" Change tmux windows w/ Ctrl+h/j/k/l -or- Ctrl+<ArrowKeys>
let g:tmux_navigator_no_mappings = 1
nnoremap <silent> <C-Left>  :TmuxNavigateLeft<cr>
nnoremap <silent> <C-Down>  :TmuxNavigateDown<cr>
nnoremap <silent> <C-Up>    :TmuxNavigateUp<cr>
nnoremap <silent> <C-Right> :TmuxNavigateRight<cr>
nnoremap <silent> <C-h>     :TmuxNavigateLeft<cr>
nnoremap <silent> <C-j>     :TmuxNavigateDown<cr>
nnoremap <silent> <C-k>     :TmuxNavigateUp<cr>
nnoremap <silent> <C-l>     :TmuxNavigateRight<cr>
nnoremap <silent> <C-\>     :TmuxNavigatePrevious<cr>

" Map <space> to insensitive search
nmap <space> :execute "/\\c".input('i/')<cr>

" Map <space><space> to word search
nmap <space><space> :execute "/\\<".input('w/')."\\>"<cr>


" ----- BUFFERS / FILES ----- "

" Write all buffers before navigating from vim to tmux pane
let g:tmux_navigator_save_on_switch = 2

" Store temporary files in a central location
let vimtmp = $HOME . '/.tmp/vim/' . getpid()
silent! call mkdir(vimtmp, "p", 0700)
let &backupdir=vimtmp
let &directory=vimtmp

" Close hidden buffers
function CloseHiddenBuffers()
  let open_buffers = []
  for i in range(tabpagenr('$'))
    call extend(open_buffers, tabpagebuflist(i + 1))
  endfor
  for num in range(1, bufnr("$") + 1)
    if buflisted(num) && index(open_buffers, num) == -1
      exec "bdelete ".num
    endif
  endfor
endfunction

" Set to auto read when a file is changed from the outside
set autoread
augroup checktime
    au!
    if !has("gui_running")
        "silent! necessary otherwise throws errors when using command
        "line window.
        autocmd BufEnter        * silent! checktime
        autocmd CursorHold      * silent! checktime
        autocmd CursorHoldI     * silent! checktime
        "These two _may_ slow things down. Remove if they do.
        autocmd CursorMoved     * silent! checktime
        autocmd CursorMovedI    * silent! checktime
    endif
augroup END


" ----- FILETYPE SPECIFIC ----- "

" Disable auto comment insertion
autocmd FileType * setlocal fo-=c fo-=r fo-=o

autocmd FileType json call ShowTrailingWhitespace#SetLocalExtraPattern(',\s$')

" ----- SYSTEM ----- "

" neovim interpreter
let g:python3_host_prog = expand('~/bin/python')


" ----- COLORS ----- "

highlight Statement    ctermfg=227
highlight MatchParen   ctermfg=226 ctermbg=None
highlight Folded       ctermfg=209 ctermbg=None

highlight LineNr       ctermfg=252 ctermbg=236
highlight CursorLineNr ctermfg=171 ctermbg=236
highlight SignColumn   ctermbg=236
highlight VertSplit    ctermbg=240 ctermfg=236

highlight CursorLine   ctermbg=236 cterm=None
highlight CursorColumn ctermbg=236
highlight ColorColumn  ctermbg=236

"highlight TabLine      ctermfg= ctermbg=
highlight TabLineSel   ctermfg=015 ctermbg=000
highlight TabLineFill  ctermfg=236

" ale (linter engine)
highlight ALEErrorSign   ctermbg=236 ctermfg=160
highlight ALEWarningSign ctermbg=236 ctermfg=178
