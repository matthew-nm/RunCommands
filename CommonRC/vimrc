" source /blah/blah/vimrc


" ===== VISUAL ===== "

" Turn on numbers
set number

" Turn on search highlighting
set hlsearch

" Always show current position
set ruler

" Set line highlighting
set cursorline
"set cursorcolumn

" Set long line marker
"set colorcolumn=85

" Don't redraw while executing macros (performance config)
"set lazyredraw

" Show matching brackets when text indicator is over them
"set showmatch
"set mat=3  " how many tenths of a second to blink

" Redraw syntax highlighting w/ <F12> (in case of errors)
noremap <F12> <Esc>:syntax sync fromstart<CR>
inoremap <F12> <C-o>:syntax sync fromstart<CR>


" ===== <LEADER> ===== "

" Remap <leader> key
let mapleader = ","
let g:mapleader = ","

" Save
nmap <leader>w :w<cr>

" Quit
nmap <leader>q :qa<Enter>

" V-split
nmap <leader>v :vsplit<Enter>

" H-split
nmap <leader>V :split<Enter>

" New tab
nmap <leader>t :tabnew<Enter>

" Fold/unfold all
nmap <leader>z zA

" Turn off highlighting
nmap <leader><space> :noh<Enter>

" Hide buffer
nmap <leader>h :hide<Enter>

" Delete buffer
nmap <leader>d :bd<Enter>

" Toggle NERDTree
nmap <leader>e :NERDTreeToggle<cr>

" Toggle tagbar
nmap <leader>E :TagbarToggle<cr>

" Close all hidden buffers
nmap <leader>c :call CloseHiddenBuffers()<Enter>

" Close all buffers (then, reopen NERDTree)
nmap <leader>C :%bd \| NERDTreeToggle<Enter>

" Far.vim replace
nmap <leader>r :Farp<Enter>
nmap <leader>R :Fardo<Enter>

" Replace all instances of word under cusor
nmap <leader>s :ReplaceWordUnderCursor<cr>

" Set toggle spell check w/ <leader>ss
map <leader>ss :setlocal spell!<cr>

" Spell check shortcuts
map <leader>sn ]s
map <leader>sp [s
map <leader>sa zg
map <leader>s? z=


" ===== EDITING / MOVEMENT ===== "

" Basic
set nocompatible

" Set up/down to work with wrapped lines
nnoremap j gj
nnoremap k gk

" Move to next lint error
nmap <silent> <F1> :ALENextWrap<cr>
nmap <silent> <F2> :ALEPreviousWrap<cr>

" Fix backspace
set backspace=eol,start,indent
set whichwrap+=<,>,h,l

" Disable auto comment insertion
autocmd FileType * setlocal fo-=c fo-=r fo-=o

" Set tab length to (2) AND convert to spaces
set tabstop=2
set softtabstop=2
set shiftwidth=2
set expandtab

" Bind system clipboard
vnoremap <C-c> "+y

" Yank to tmux clipboard (vim-tbone)
nnoremap ty :Tyank<cr>
vnoremap ty :Tyank<cr>

" Sudo Save
"   To use this command, type :Sudow
"   Note: all custom commands must start uppercase
command Sudow w !sudo tee % >/dev/null

" Clean trailing whitespace
command! CleanWhitespace
  \ let b:bufview=winsaveview() |
  \ :%s/\s\+$//g                |
  \ :execute "normal \<C-O>"    |
  \ call winrestview(b:bufview)

" Replace all instances of word under cursor
command! ReplaceWordUnderCursor
  \ let b:bufview=winsaveview()                         |
  \ let b:foo=expand('<cword>')                         |
  \ :execute "let b:bar=input('Replace" b:foo "with ')" |
  \ :execute ":%s/\\<".b:foo."\\>/".b:bar."/g"          |
  \ :execute "?\\<".b:bar."\\>"                         |
  \ call winrestview(b:bufview)


" ===== CONTROL / SEARCH ===== "

" Turn on mouse stuff
set mouse+=a
"if &term =~ '^screen'
    " tmux knows the extended mouse mode
    set ttymouse=xterm2
"endif

" Set scroll offset (buffer around cursor)
set scrolloff=7

" Set folding options
set foldlevelstart=10

" Change tmux windows w/ Ctrl+h/j/k/l -or- Ctrl+<ArrowKeys>
let g:tmux_navigator_no_mappings = 1
nnoremap <silent> <C-Left>  :TmuxNavigateLeft<cr>
nnoremap <silent> <C-Down>  :TmuxNavigateDown<cr>
nnoremap <silent> <C-Up>    :TmuxNavigateUp<cr>
nnoremap <silent> <C-Right> :TmuxNavigateRight<cr>
nnoremap <silent> <C-h>     :TmuxNavigateLeft<cr>
nnoremap <silent> <C-j>     :TmuxNavigateDown<cr>
nnoremap <silent> <C-k>     :TmuxNavigateUp<cr>
nnoremap <silent> <C-l>     :TmuxNavigateRight<cr>
nnoremap <silent> <C-\>     :TmuxNavigatePrevious<cr>

" Map <space> to insensitive search
nmap <space> :execute "/\\c".input('i/')<cr>

" Map <space><space> to word search
nmap <space><space> :execute "/\\<".input('w/')."\\>"<cr>

" For regular expressions turn magic on
set magic

" Search options
set smartcase
set hlsearch
set incsearch  "search as you type


" ===== BUFFERS / FILES ===== "

" A buffer becomes hidden when it is abandoned
set hid

" Write all buffers before navigating from vim to tmux pane
let g:tmux_navigator_save_on_switch = 2

" Store temporary files in a central location
let vimtmp = $HOME . '/.tmp/vim/' . getpid()
silent! call mkdir(vimtmp, "p", 0700)
let &backupdir=vimtmp
let &directory=vimtmp

" Close hidden buffers
function CloseHiddenBuffers()
  let open_buffers = []
  for i in range(tabpagenr('$'))
    call extend(open_buffers, tabpagebuflist(i + 1))
  endfor
  for num in range(1, bufnr("$") + 1)
    if buflisted(num) && index(open_buffers, num) == -1
      exec "bdelete ".num
    endif
  endfor
endfunction

" Set to auto read when a file is changed from the outside
set autoread
augroup checktime
    au!
    if !has("gui_running")
        "silent! necessary otherwise throws errors when using command
        "line window.
        autocmd BufEnter        * silent! checktime
        autocmd CursorHold      * silent! checktime
        autocmd CursorHoldI     * silent! checktime
        "these two _may_ slow things down. Remove if they do.
        autocmd CursorMoved     * silent! checktime
        autocmd CursorMovedI    * silent! checktime
    endif
augroup END


" ===== FILETYPE SPECIFIC ===== "

autocmd FileType json call ShowTrailingWhitespace#SetLocalExtraPattern(',\s$')


" ===== COLORS ===== "

highlight LineNr       term=bold cterm=NONE ctermfg=Yellow ctermbg=236 gui=NONE guifg=Yellow guibg=NONE
highlight CursorLineNr term=bold cterm=NONE ctermfg=Yellow ctermbg=236 gui=NONE guifg=Yellow guibg=NONE
highlight Statement    term=bold cterm=NONE ctermfg=Yellow ctermbg=236 gui=NONE guifg=Yellow guibg=NONE
highlight CursorLine   ctermbg=236 cterm=none
"highlight CursorColumn ctermbg=236
highlight ColorColumn  ctermbg=236
highlight Folded       ctermfg=209 ctermbg=234
highlight SignColumn   ctermbg=236
highlight VertSplit    ctermbg=028 ctermfg=236
