" source /blah/blah/vimrc_plugins


" ----- PLUGINS via `vim-plug` ----- "

" run `vim-plug` in terminal to install manager

" run the following within vim:
"   PlugInstall
"   PlugUpdate
"   PlugClean
"   PlugUpgrade

call plug#begin()
"Plug 'user/repo', 'branch_or_tag'

" General
Plug 'scrooloose/nerdtree'
Plug 'aufgang001/vim-nerdtree_plugin_open'
Plug 'majutsushi/tagbar' "needs universal-ctags intalled
Plug 'vim-airline/vim-airline'
Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
Plug 'junegunn/fzf.vim'
Plug 'brooth/far.vim' "(find and replace)
Plug 'konfekt/fastfold'
" Plug 'ervandew/supertab'
Plug 'vim-scripts/ShowTrailingWhitespace'
Plug 'airblade/vim-gitgutter'
Plug 'w0rp/ale' "(linter engine) needs linters installed in PATH
Plug 'godlygeek/tabular'
Plug 'tomtom/tcomment_vim'
Plug 'vim-scripts/YankRing.vim'
Plug 'mbbill/undotree'
Plug 'kien/tabman.vim'
Plug 'luochen1990/rainbow'
Plug 'Yggdroot/indentLine'

" Themes
Plug 'ayu-theme/ayu-vim'
Plug 'rafi/awesome-vim-colorschemes'
Plug 'vim-airline/vim-airline-themes'

" Syntax
Plug 'vim-python/python-syntax'
Plug 'plasticboy/vim-markdown'
Plug 'sirosen/vim-rockstar'
Plug 'neovimhaskell/haskell-vim'
Plug 'magicalbanana/sql-syntax-vim'

" Unused?
Plug 'tpope/vim-fugitive'

" Tmux
Plug 'tpope/vim-tbone'
Plug 'christoomey/vim-tmux-navigator'

" Autocompletion
Plug 'Valloric/YouCompleteMe'
  " https://github.com/Valloric/YouCompleteMe#installation

" Python
" Plug 'davidhalter/jedi-vim'
Plug 'tmhedberg/SimpylFold'

" Markdown
Plug 'JamshedVesuna/vim-markdown-preview'


" Conditionals
if $POWERLINE == 1
  Plug 'ryanoasis/vim-devicons'
endif

call plug#end()


" -------------------------- "
" ----- CONFIGURATIONS ----- "
" -------------------------- "

" ----- Vim Airline ----- "

" Use powerline fonts if supported
if $POWERLINE == 1
  let g:airline_powerline_fonts=1
endif

" Get rid of annoying symbols
let g:airline_symbols = {}
let g:airline_symbols.linenr = ''
let g:airline_symbols.maxlinenr = ''

" Get rid of whitespace warning
silent! call airline#extensions#whitespace#disable()
let g:airline_section_warning = airline#section#create(['ycm_warning_count','syntastic-warn'])


" ----- NERDTree ----- "

" Show hidden files by default
let NERDTreeShowHidden = 1

" Ignore certain filetypes
let NERDTreeIgnore = ['\.pyc$', '\.swp$', '\.swo$']

" Some weird bug fix...
let g:NERDTreeGlyphReadOnly = "RO"

" Configure NerdtreePluginOpen
let g:nerdtree_plugin_open_cmd = 'kde-open'

" Fix to work with tmux-navigator
let g:NERDTreeMapJumpNextSibling = '<Nop>'
let g:NERDTreeMapJumpPrevSibling = '<Nop>'


" ----- YouCompleteMe ----- "

let g:ycm_autoclose_preview_window_after_insertion = 1
let g:ycm_autoclose_preview_window_after_completion = 1  " if this is set, former is irrelevant


" ----- tabular ----- "

" Call on every | entry
inoremap <silent> <Bar>   <Bar><Esc>:call <SID>align()<CR>a
function! s:align()
  let p = '^\s*|\s.*\s|\s*$'
  if exists(':Tabularize') && getline('.') =~# '^\s*|' && (getline(line('.')-1) =~# p || getline(line('.')+1) =~# p)
    let column = strlen(substitute(getline('.')[0:col('.')],'[^|]','','g'))
    let position = strlen(matchstr(getline('.')[0:col('.')],'.*|\s*\zs.*'))
    Tabularize/|/l1
    normal! 0
    call search(repeat('[^|]*|',column).'\s\{-\}'.repeat('.',position),'ce',line('.'))
  endif
endfunction


" ----- indentLine ----- "

let g:indentLine_char = 'â”‚'


" ----- Markdown Preview ----- '

let vim_markdown_preview_hotkey = '<C-m>'


" ----- jedi-vim ----- "

" Disable automatic package completions
let g:jedi#popup_on_dot = 0

" Disable mappings
let g:jedi#rename_command = ''


" ----- supertab ----- "

let g:SuperTabDefaultCompletionType = '<c-n>'


" ----- SimpylFold ----- "

let g:SimpylFold_fold_import = 0
let g:SimpylFold_fold_docstring = 0
let g:SimpylFold_docstring_preview = 1


" ----- ale (linter) ----- "

let g:ale_set_highlights = 0
let g:ale_sign_column_always = 1
"let g:ale_change_sign_column_color = 1
let g:airline#extensions#ale#enabled = 1

let g:ale_linters = {'rust': ['rls', 'cargo']}

" python
let g:ale_python_flake8_options = '--ignore=E201,E202,E203,E221,E222,E225,E226,E231,E251,E262,E265,E303,E266,E501'

" rust
let g:ale_rust_ignore_error_codes = []


" ----- tagbar ----- "

" Haskell support (needs `hasktags` installed in PATH)
let g:tagbar_type_haskell = {
    \ 'ctagsbin'  : 'hasktags',
    \ 'ctagsargs' : '-x -c -o-',
    \ 'kinds'     : [
        \  'm:modules:0:1',
        \  'd:data: 0:1',
        \  'd_gadt: data gadt:0:1',
        \  't:type names:0:1',
        \  'nt:new types:0:1',
        \  'c:classes:0:1',
        \  'cons:constructors:1:1',
        \  'c_gadt:constructor gadt:1:1',
        \  'c_a:constructor accessors:1:1',
        \  'ft:function types:1:1',
        \  'fi:function implementations:0:1',
        \  'o:others:0:1'
    \ ],
    \ 'sro'        : '.',
    \ 'kind2scope' : {
        \ 'm' : 'module',
        \ 'c' : 'class',
        \ 'd' : 'data',
        \ 't' : 'type'
    \ },
    \ 'scope2kind' : {
        \ 'module' : 'm',
        \ 'class'  : 'c',
        \ 'data'   : 'd',
        \ 'type'   : 't'
    \ }
\ }


" ----- undotree ----- "

nnoremap <F5> :UndotreeToggle<cr>


" ----- ShowTrailingWhitespace ----- "

" Disable on certain buffers
autocmd BufEnter FAR* :call ShowTrailingWhitespace#Set(0,0)


" ----- rainbow ----- "

let g:rainbow_active = 1
let g:rainbow_conf = {
	\	'guifgs': ['lightblue', 'lightyellow', 'lightcyan', 'lightmagenta'],
	\	'ctermfgs': ['lightblue', 'lightyellow', 'lightcyan', 'lightmagenta'],
	\}


" ----- Python-Syntax ----- "

let g:python_highlight_all = 1


"
"
" Random cleanup...
filetype indent off
